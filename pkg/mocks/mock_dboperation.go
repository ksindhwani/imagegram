// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/kunalsindhwani/InterviewCoding/bandlabs/imagegram/pkg/database/dboperation.go

// Package mock_database is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	database "github.com/ksindhwani/imagegram/pkg/database"
	converter "github.com/ksindhwani/imagegram/pkg/internal/converter"
	tables "github.com/ksindhwani/imagegram/pkg/internal/tables"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// DeleteComment mocks base method.
func (m *MockDatabase) DeleteComment(commentId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", commentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockDatabaseMockRecorder) DeleteComment(commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockDatabase)(nil).DeleteComment), commentId)
}

// GetAllImages mocks base method.
func (m *MockDatabase) GetAllImages() ([]tables.ImageTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllImages")
	ret0, _ := ret[0].([]tables.ImageTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllImages indicates an expected call of GetAllImages.
func (mr *MockDatabaseMockRecorder) GetAllImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImages", reflect.TypeOf((*MockDatabase)(nil).GetAllImages))
}

// GetAllPostWithLast2Comments mocks base method.
func (m *MockDatabase) GetAllPostWithLast2Comments(cursor, pageSize int) ([]database.AllPostsJoinQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPostWithLast2Comments", cursor, pageSize)
	ret0, _ := ret[0].([]database.AllPostsJoinQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPostWithLast2Comments indicates an expected call of GetAllPostWithLast2Comments.
func (mr *MockDatabaseMockRecorder) GetAllPostWithLast2Comments(cursor, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPostWithLast2Comments", reflect.TypeOf((*MockDatabase)(nil).GetAllPostWithLast2Comments), cursor, pageSize)
}

// InsertNewPost mocks base method.
func (m *MockDatabase) InsertNewPost(postTableRow tables.PostTable, imageTableRow tables.ImageTable) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewPost", postTableRow, imageTableRow)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewPost indicates an expected call of InsertNewPost.
func (mr *MockDatabaseMockRecorder) InsertNewPost(postTableRow, imageTableRow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewPost", reflect.TypeOf((*MockDatabase)(nil).InsertNewPost), postTableRow, imageTableRow)
}

// SaveComment mocks base method.
func (m *MockDatabase) SaveComment(comment tables.CommentTable) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveComment", comment)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveComment indicates an expected call of SaveComment.
func (mr *MockDatabaseMockRecorder) SaveComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveComment", reflect.TypeOf((*MockDatabase)(nil).SaveComment), comment)
}

// UpdateImageConvertedData mocks base method.
func (m *MockDatabase) UpdateImageConvertedData(image converter.ImageConversionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageConvertedData", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImageConvertedData indicates an expected call of UpdateImageConvertedData.
func (mr *MockDatabaseMockRecorder) UpdateImageConvertedData(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageConvertedData", reflect.TypeOf((*MockDatabase)(nil).UpdateImageConvertedData), image)
}
